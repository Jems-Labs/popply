generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  email       String     @unique
  image       String?
  password    String
  name        String
  shops       Shop[]
  comments    Comment[]
  viewedShops ShopView[]
  upvotes     Upvote[]
}

model Shop {
  id          Int        @id @default(autoincrement())
  ownerId     Int
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name        String
  description String     @db.Text
  logo        String?
  banner      String?
  category    String
  uniqueUrl   String     @unique
  products    Product[]
  comments    Comment[]
  views       ShopView[]
  status      ShopStatus @default(draft)
  launchDate  DateTime?
  expiresAt   DateTime?
  upvotes     Upvote[]
}

model Product {
  id          Int    @id @default(autoincrement())
  shopId      Int
  shop        Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  name        String
  description String @db.Text
  price       Float  @default(0.0)
  image       String
  productUrl  String
  clicks      Int    @default(0)
}

model Comment {
  id     Int    @id @default(autoincrement())
  shopId Int
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes  Int    @default(0)
  text   String
}

model ShopView {
  id     Int @id @default(autoincrement())
  userId Int
  shopId Int

  user      User     @relation(fields: [userId], references: [id])
  shop      Shop     @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
}

model Upvote {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])
  shopId Int
  shop   Shop @relation(fields: [shopId], references: [id])
}

enum ShopStatus {
  draft
  open
  expired
}
